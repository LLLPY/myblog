# Generated by Django 3.1.2 on 2021-06-17 23:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile', models.CharField(max_length=11, unique=True)),
                ('avatar', models.ImageField(blank=True, default='static/avatar/20210602/demo.png', upload_to='static/avatar/%Y%m%d')),
                ('job', models.CharField(default='无业游民~', max_length=20)),
                ('desc', models.CharField(blank=True, default='这个人很懒,ta什么都没写~', max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户管理',
                'verbose_name_plural': '用户管理',
                'db_table': '用户表',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, db_column='标题', max_length=100)),
                ('createdTime', models.DateTimeField(auto_now=True, db_column='创建时间')),
            ],
            options={
                'db_table': '文章分类',
            },
        ),
        migrations.CreateModel(
            name='RequestLogTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(db_column='IP地址', max_length=30)),
                ('userAgent', models.CharField(db_column='请求头', max_length=200)),
                ('httpRefer', models.CharField(db_column='跳转的网页', max_length=100)),
                ('requestTime', models.DateTimeField(db_column='请求时间', default=django.utils.timezone.now)),
                ('requestPath', models.CharField(db_column='请求路径', default='/', max_length=50)),
            ],
            options={
                'db_table': '请求记录表',
            },
        ),
        migrations.CreateModel(
            name='SearchTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(db_column='关键字', max_length=100)),
                ('createdTime', models.DateTimeField(db_column='搜索的日期', default=django.utils.timezone.now)),
            ],
            options={
                'db_table': '搜索记录表',
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, db_column='标题', max_length=50)),
                ('tags', models.CharField(blank=True, db_column='标签', max_length=50)),
                ('summary', models.CharField(db_column='摘要信息', max_length=200)),
                ('content', models.TextField(db_column='文章正文')),
                ('total_views', models.PositiveIntegerField(db_column='浏览量', default=0)),
                ('total_likes', models.PositiveIntegerField(db_column='获赞量', default=0)),
                ('createdTime', models.DateTimeField(db_column='文章创建时间', default=django.utils.timezone.now)),
                ('updatedTime', models.DateTimeField(db_column='文章修改的时间')),
                ('isShow', models.BooleanField(db_column='是否显示本文', default=True)),
                ('author', models.ForeignKey(db_column='作者', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(db_column='分类', on_delete=django.db.models.deletion.CASCADE, to='app.category')),
            ],
            options={
                'db_table': '博客',
            },
        ),
    ]
